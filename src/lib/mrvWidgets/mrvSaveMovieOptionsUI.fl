# data file for the Fltk User Interface Designer (fluid)
version 1.0500
i18n_type 1
i18n_include {<libintl.h>}
i18n_conditional {}
i18n_gnu_function gettext
i18n_gnu_static_function gettext_noop
header_name {.h}
code_name {.cxx}
include_guard {}
decl {\#include <string>} {public global
}

decl {\#include <filesystem>} {public global
}

decl {namespace fs = std::filesystem;} {public global
}

decl {\#include "tlIO/FFmpeg.h"} {public global
}

decl {\#include "tlCore/String.h"} {public global
}

decl {\#include "mrvCore/mrvI8N.h"} {public global
}

decl {\#include "mrvCore/mrvHome.h"} {public global
}

decl {\#include "mrvApp/mrvSettingsObject.h"} {public global
}

decl {\#include "mrViewer.h"} {public global
}

class SaveMovieOptionsUI {open
} {
  decl {bool cancel = false;} {public local
  }
  Function {SaveMovieOptionsUI(bool hasAudio = true, bool audioOnly = false)} {open
  } {
    Fl_Window uiMain {
      label {Save Movie Options}
      xywh {834 81 465 613} type Double align 0 hide modal
    } {
      Fl_Group {} {
        label {Common Settings}
        xywh {34 38 390 44} box ROUNDED_FRAME color 56
      } {
        Fl_Check_Button Annotations {
          label {Save Annotations}
          callback {auto settings = mrv::App::app->settings();
settings->setValue("SaveMovie/Annotations", static_cast<int>(o->value()));}
          tooltip {Save Annotations burned into the movie or sequence.
It also allows saving OpenEXRs from an 8-bit movie and changing OpenEXR's pixel type.

Furthermore, it allows saving A/B or Tiled comparisons and baking OCIO.

However, it is limited to the size of your screen.} xywh {160 48 20 20} down_box DOWN_BOX
          code0 {auto settings = mrv::App::app->settings();}
          code1 {int value = settings->getValue<int>("SaveMovie/Annotations");}
          code2 {o->value(value);}
        }
      }
      Fl_Group VideoOptions {
        label {Video Options}
        xywh {34 114 390 280} box ROUNDED_FRAME color 56
      } {
        Fl_Choice Resolution {
          label Resolution
          user_data this user_data_type {SaveMovieOptionsUI*}
          callback {int value = o->value();

auto settings = mrv::App::app->settings();
settings->setValue("SaveMovie/Resolution", value);}
          tooltip {Resolution of movie to save.} xywh {170 137 170 29} down_box BORDER_BOX
        } {
          MenuItem {} {
            label {Same Size}
            xywh {0 0 100 20}
          }
          MenuItem {} {
            label {Half Size}
            xywh {10 10 100 20}
          }
          MenuItem {} {
            label {Quarter Size}
            xywh {20 20 100 20}
          }
        }
        Fl_Check_Button Hardware {
          label {Hardware Codec}
          user_data this user_data_type {SaveMovieOptionsUI*}
          callback {add_pixel_formats(v->Profile, v->PixelFormat);

auto settings = mrv::App::app->settings();
settings->setValue("SaveMovie/HardwareEncode", int(o->value()));}
          xywh {166 188 174 24} down_box DOWN_BOX
        }
        Fl_Choice Profile {
          label Profile
          user_data this user_data_type {SaveMovieOptionsUI*}
          callback {add_presets(o, v->Preset);
add_pixel_formats(o, v->PixelFormat);
add_hardware(o, v->Hardware);

const Fl_Menu_Item* item = o->mvalue();
if (!item) return;
auto settings = mrv::App::app->settings();
settings->setValue("SaveMovie/Profile", std::string(item->label()));} open
          tooltip {FFMpeg's Profile settings.} xywh {170 225 170 29} down_box BORDER_BOX
        } {}
        Fl_Button {} {
          label {?}
          callback {help_profile_cb();}
          tooltip {Help on Profile} xywh {351 225 24 29}
        }
        Fl_Choice PixelFormat {
          label {Pixel Format}
          callback {const Fl_Menu_Item* item = o->mvalue();
if (!item) return;
auto settings = mrv::App::app->settings();
settings->setValue("SaveMovie/PixelFormat", std::string(item->label()));} open
          tooltip {FFMpeg's Pixel Format for the codec selected} xywh {170 267 170 29} down_box BORDER_BOX
        } {}
        Fl_Button {} {
          label {?}
          callback {help_pixel_format_cb();}
          tooltip {Help on Pixel Format} xywh {351 267 24 29}
        }
        Fl_Choice Preset {
          label Preset
          callback {const Fl_Menu_Item* item = o->mvalue();
if (!item) return;
auto settings = mrv::App::app->settings();
settings->setValue("SaveMovie/Preset", std::string(item->label()));}
          tooltip {FFMpeg's Preset setting for the codec selected.} xywh {171 309 170 29} down_box BORDER_BOX
        } {}
        Fl_Button {} {
          label {?}
          callback {help_preset_cb();}
          tooltip {Help on Preset} xywh {351 309 24 29}
        }
        Fl_Button {} {
          label {Advanced Settings}
          callback {if (!uiAdvancedSettings->visible())
   uiAdvancedSettings->show();
else
   uiAdvancedSettings->hide();

while (uiAdvancedSettings->visible())
  Fl::check();}
          xywh {171 355 170 28}
        }
        Fl_Button {} {
          label {?}
          callback {help_advanced_settings_cb();}
          tooltip {Help on Advance Settings} xywh {351 354 24 29}
        }
      }
      Fl_Group AudioOptions {
        label {Audio Options}
        xywh {34 420 394 132} box ROUNDED_FRAME color 56
      } {
        Fl_Choice AudioCodec {
          label Codec
          callback {const Fl_Menu_Item* item = o->mvalue();
if (!item) return;
auto settings = mrv::App::app->settings();
settings->setValue("SaveMovie/AudioCodec", std::string(item->label()));} open
          tooltip {FFMpeg's Audio Codec settings.} xywh {172 444 170 29} down_box BORDER_BOX
          code0 {add_audio_codecs(o);}
        } {}
        Fl_Box {} {
          label {Note that while saving with audio, the audio will not be heard.}
          xywh {57 482 335 60} labelsize 12 align 144
        }
      }
      Fl_Group {} {
        xywh {105 569 244 29}
      } {
        Fl_Button {} {
          label Ok
          user_data uiMain user_data_type {Fl_Double_Window*}
          callback {v->hide();}
          xywh {105 569 90 29}
        }
        Fl_Button {} {
          label Cancel
          user_data uiMain user_data_type {Fl_Double_Window*}
          callback {cancel = true;
v->hide();}
          xywh {259 569 90 29}
        }
      }
    }
    Fl_Window uiHelpWindow {
      label {Help Window}
      xywh {696 505 638 327} type Double hide resizable modal
    } {
      Fl_Text_Display uiHelp {
        xywh {37 29 563 268} textfont 4 resizable
        code0 {Fl_Text_Buffer* b = new Fl_Text_Buffer;}
        code1 {o->buffer(b);}
        code2 {o->textcolor(FL_BLACK);}
      }
    }
    Fl_Window uiAdvancedSettings {
      label {Advanced Settings} open
      xywh {1185 376 411 310} type Double hide hotspot modal
    } {
      Fl_Check_Button Override {
        label Override
        callback {int value = o->value();

auto settings = mrv::App::app->settings();
settings->setValue("SaveMovie/Override", value);}
        tooltip {Select this to override all the parameters below.} xywh {129 20 78 22} down_box DOWN_BOX
      }
      Fl_Choice ColorRange {
        label {Color Range}
        callback {int value = o->value();

auto settings = mrv::App::app->settings();
settings->setValue("SaveMovie/Color Range", value);}
        tooltip {FFMpeg's Color Range for the codec selected} xywh {130 60 170 29} down_box BORDER_BOX
      } {
        MenuItem {} {
          label {TV (Legal Range)}
          xywh {0 0 100 20}
        }
        MenuItem {} {
          label {PC (Full Range)}
          xywh {10 10 100 20}
        }
      }
      Fl_Choice ColorSpace {
        label {Color Space}
        callback {int value = o->value();

auto settings = mrv::App::app->settings();
settings->setValue("SaveMovie/Color Space", value);}
        tooltip {FFMpeg's Color Space for the codec selected} xywh {129 102 170 29} down_box BORDER_BOX
      } {
        MenuItem {} {
          label BGR
          xywh {0 0 100 20}
        }
        MenuItem {} {
          label bt709
          xywh {10 10 100 20}
        }
        MenuItem {} {
          label FCC
          xywh {20 20 100 20}
        }
        MenuItem {} {
          label SMPTE240m
          xywh {30 30 100 20}
        }
        MenuItem {} {
          label bt601
          xywh {40 40 100 20}
        }
        MenuItem {} {
          label bt2020
          xywh {50 50 100 20}
        }
        MenuItem {} {
          label unspecified
          xywh {60 60 100 20}
        }
        MenuItem {} {
          label reserved
          xywh {70 70 100 20}
        }
      }
      Fl_Choice ColorPrimaries {
        label {Color Primaries}
        callback {int value = o->value();

auto settings = mrv::App::app->settings();
settings->setValue("SaveMovie/Color Primaries", value);}
        tooltip {FFMpeg's Color Primaries setting for the codec selected.} xywh {130 146 170 29} down_box BORDER_BOX
      } {
        MenuItem {} {
          label bt709
          xywh {0 0 100 20}
        }
        MenuItem {} {
          label unspecified
          xywh {10 10 100 20}
        }
        MenuItem {} {
          label reserved
          xywh {20 20 100 20}
        }
        MenuItem {} {
          label bt470m
          xywh {30 30 100 20}
        }
        MenuItem {} {
          label SMPTE170m
          xywh {40 40 100 20}
        }
        MenuItem {} {
          label SMPTE240m
          xywh {50 50 100 20}
        }
        MenuItem {} {
          label Film
          xywh {60 60 100 20}
        }
        MenuItem {} {
          label bt2020
          xywh {70 70 100 20}
        }
        MenuItem {} {
          label SMPTE428
          xywh {50 50 100 20}
        }
        MenuItem {} {
          label SMPTE431
          xywh {60 60 100 20}
        }
        MenuItem {} {
          label SMPTE432
          xywh {70 70 100 20}
        }
        MenuItem {} {
          label EBU3213
          xywh {80 80 100 20}
        }
      }
      Fl_Choice ColorTRC {
        label {Color TRC}
        user_data this user_data_type {SaveMovieOptionsUI*}
        callback {int value = o->value();

auto settings = mrv::App::app->settings();
settings->setValue("SaveMovie/Color TRC", value);} open
        tooltip {FFMpeg's Color Transfer Function settings for the codec selected.} xywh {129 190 170 29} down_box BORDER_BOX
      } {
        MenuItem {} {
          label bt709
          xywh {10 10 100 20}
        }
        MenuItem {} {
          label unspecified
          xywh {20 20 100 20}
        }
        MenuItem {} {
          label reserved
          xywh {30 30 100 20}
        }
        MenuItem {} {
          label gamma22
          xywh {40 40 100 20}
        }
        MenuItem {} {
          label gamma28
          xywh {50 50 100 20}
        }
        MenuItem {} {
          label bt601
          xywh {60 60 100 20}
        }
        MenuItem {} {
          label smpte240m
          xywh {70 70 100 20}
        }
        MenuItem {} {
          label linear
          xywh {80 80 100 20}
        }
        MenuItem {} {
          label log
          xywh {90 90 100 20}
        }
        MenuItem {} {
          label logsqrt
          xywh {100 100 100 20}
        }
        MenuItem {} {
          label {iec61966-2-4}
          xywh {110 110 100 20}
        }
        MenuItem {} {
          label bt1361
          xywh {120 120 100 20}
        }
        MenuItem {} {
          label {iec61966-2-1}
          xywh {120 120 100 20}
        }
        MenuItem {} {
          label {bt2020-10}
          xywh {130 130 100 20}
        }
        MenuItem {} {
          label {bt2020-12}
          xywh {140 140 100 20}
        }
        MenuItem {} {
          label bt2100
          xywh {150 150 100 20}
        }
        MenuItem {} {
          label hlg selected
          xywh {160 160 100 20}
        }
      }
      Fl_Group {} {
        xywh {85 242 244 29}
      } {
        Fl_Button {} {
          label Ok
          user_data uiAdvancedSettings user_data_type {Fl_Double_Window*}
          callback {v->hide();}
          xywh {85 242 90 29}
        }
        Fl_Button {} {
          label Cancel
          user_data uiAdvancedSettings user_data_type {Fl_Double_Window*}
          callback {Override->value(0);
v->hide();}
          xywh {239 242 90 29}
        }
      }
    }
    code {if (!hasAudio)
{
  AudioOptions->deactivate();
}
if (audioOnly)
{
  Annotations->deactivate();
  VideoOptions->deactivate();
}
else
{   
   add_resolution(Resolution);
   add_profiles(Profile);
   add_presets(Profile, Preset);
   add_hardware(Profile, Hardware);
   add_pixel_formats(Profile, PixelFormat);      
   add_advanced_override(Override);
   add_advanced_color_range(ColorRange);
   add_advanced_color_space(ColorSpace);
   add_advanced_color_primaries(ColorPrimaries);   
   add_advanced_color_trc(ColorTRC);
}
uiHelpWindow->hide();
uiAdvancedSettings->hide();
uiMain->show();
while (uiMain->visible())
  Fl::check();} {}
  }
  Function {help_profile_cb()} {} {
    code {uiHelpWindow->label(_("Profile Help"));
auto buffer = uiHelp->buffer();
buffer->text(_(R"(
The Profile setting allows you to select
the codec and profile for video saving.

Each profile has its benefits and drawbacks.

None - This is mpeg4 compatible with DVD movies.
H264 - Only if mrv2 has been compiled as GPL.  One
       of the most popular codecs, but it is now
       becoming obsolete.
ProRes - ProRes is a family of codecs developed by 
         Apple.
         The Normal version strikes a balance 
         between quality and file size.  
ProRes_Proxy - Most compressed ProRes, offering the
               smallest file size.  
               Good for offline editing.
ProRes_LT - More compressed than normal ProRes but 
            less than Proxy.  Good for offline 
            editing.
ProRes_HQ - Less compressed then normal ProRes.  
            Often used for mastering and final 
            delivery.
ProRes_4444 - Highest quality ProRes format, 
              offering full 4:4:4
              chroma sampling (color information 
              for each pixel).
              Preserves the most detail and color 
              accuracy, ideal for high-end workflows 
              like color grading and visual effects.
              Supports alpha channels for 
              compositing graphics with 
              transparency.
ProRes_XQ - Highest quality version of ProRes 4444, 
            designed for high-dynamic-range (HDR) 
            imagery.
VP9 - Codec developed by Google.  High compression 
      ratio.
      It supports a whole range of pixel formats to
      balance disk space vs. quality.
      Good for high-end delivery for either Web or 
      online review.
Cineform - codec developed by GoPro, that rivals 
           ProRes in features, except for HDR.  
           It was discontinued in 2021, but most 
           packages may support it.
           It does not compress as well as ProRes 
           or VP9.
           It supports alpha channels for 
           compositing graphics with transparency.
AV1 - New generation codec which is gaining support from
      Google, Netflix and Amazon.  Compresses better than VP9 
      or H264 for the same quality but requires more computer
      resources.  Optimal for video reviews.
HAP - RGB/A codec which is optimized for fast playback with
      CPU decoding.  It does not compress that well.
      It needs hap-alpha* presets to save alpha channel.

Hardware encoding is only supported on newer MacBook
Pro with M1 or newer chips.  H264, Prores, VP9 and
AV1 are supported or soon will be.
)"));
uiHelpWindow->show();} {}
  }
  Function {help_pixel_format_cb()} {} {
    code {uiHelpWindow->label(_("Pixel Format Help"));
auto buffer = uiHelp->buffer();
buffer->text(_(R"(
The Pixel Format specifies how the video is encoded in the
file.  Each codec and profile has a number of pixel formats 
it supports.
There are two main types of pixel formats supported:

    - YUV (Luminance, Cr, Cb)
    - BGR (RGB with reversed channels)
    - RGB

In addition, some codecs support alpha channel (transparency),
like BGRA.

The other element of the codec is the 'P' which indicates the
channels are stored in planar order, instead of each component
interleaved.

Finally, the number in the pixel format name indicates the
number of bits the pixel format uses to encode.  
Normal values for that are 8, 10, 12 and 16.

)"));
uiHelpWindow->show();} {}
  }
  Function {help_preset_cb()} {} {
    code {uiHelpWindow->label(_("Preset Help"));
auto buffer = uiHelp->buffer();
buffer->text(_(R"(

The Preset setting allows you to store and pass
flags to FFmpeg (the video engine that mrv2 uses) to 
easily control the quality and size of the video besides
the pixel format.

When choosing the quality you should set in this order:
  - Profile
  - Pixel Format
  - Preset

The preset files are stored in the presets/ directory of the 
mrv2 install but you can configure the directory by using the
environment variable $STUDIOPATH/presets.

The naming of the files is the name of the profile-preset.pst.

The format is very simple, with comments and colon separated 
options.
)"));
uiHelpWindow->show();} {}
  }
  Function {help_advanced_settings_cb()} {} {
    code {uiHelpWindow->label(_("Advanced Settings Help"));
auto buffer = uiHelp->buffer();
buffer->text(_(R"(

The Advanced Settings allows you store 
metadata in the movie file to determine where 
and how it was created.  Useful to indicate, 
for example, if a set of 8-bit images were 
bt709 or some other color space.

If you don't know what those settings do, 
DON'T MESS WITH THEM!
)"));
uiHelpWindow->show();} {}
  }
  Function {add_hardware(Fl_Choice* o, Fl_Check_Button* v)} {} {
    code {const Fl_Menu_Item* item = &o->menu()[o->value()];
if (!item || !item->label()) return;
const std::string codec = item->label();

v->deactivate();

if (codec == "H264")
{    
\#ifdef __APPLE__
   v->activate();
\#endif
}
else if (codec == "ProRes")
{
\#ifdef __APPLE__
   v->activate();
\#endif   
}
else if (codec == "ProRes_Proxy")
{
\#ifdef __APPLE__
   v->activate();
\#endif
}
else if (codec == "ProRes_LT")
{
\#ifdef __APPLE__
   v->activate();
\#endif
}
else if (codec == "ProRes_XQ")
{   
\#ifdef __APPLE__
   v->activate();
\#endif
}
else if (codec == "ProRes_4444")
{
\#ifdef __APPLE__
   v->activate();
\#endif
}
else if (codec == "VP9")
{
\#ifdef __APPLE__
   v->activate();
\#endif
}

auto settings = mrv::App::app->settings();
const bool value = settings->getValue<int>("SaveMovie/HardwareEncode");
v->value(value);} {}
  }
  Function {add_h264_sw_formats(Fl_Choice* v)} {} {
    code {v->add("YUV_420P");
v->add("YUV_422P");
v->add("YUV_444P");
v->add("YUV_420P_10LE");
v->add("YUV_422P_10LE");
v->add("YUV_444P_10LE");} {}
  }
  Function {add_pixel_formats(Fl_Choice* o, Fl_Choice* v)} {} {
    code {const Fl_Menu_Item* item = &o->menu()[o->value()];
if (!item || !item->label()) return;

std::string codec = item->label();

v->clear();


if (codec == "None" || codec == "MPEG4")
{ 
   v->add("YUV_420P");
}
else if (codec == "H264")
{    
\#ifdef __APPLE__
   if (Hardware->value())
   {
       v->add("NV12");
   }
   else
   {      
      add_h264_sw_formats(v);   
   }
\#else   
   add_h264_sw_formats(v);
\#endif
}
else if (codec == "ProRes")
{   
   v->add("YUV_422P_10LE");

}
else if (codec == "ProRes_Proxy")
{   
   v->add("YUV_422P_10LE");
}
else if (codec == "ProRes_LT")
{   
   v->add("YUV_422P_10LE");
}
else if (codec == "ProRes_XQ")
{   
   v->add("YUV_444P_10LE");
   v->add("YUVA_444P_16LE");
 }
else if (codec == "ProRes_4444")
{      
   v->add("YUV_422P_10LE");
   v->add("YUV_444P_10LE");
   v->add("YUVA_444P_10LE");
\#ifdef __APPLE__
   if (Hardware->value())
   {
       v->add("YUV_422P_12LE");
       v->add("YUV_444P_12LE");
       v->add("YUVA_444P_12LE");
   }
\#endif
}
else if (codec == "DNxHD")
{      
   v->add("YUV_422P");
   v->add("YUV_422P_10LE");
}
else if (codec == "DNxHR_LB")
{      
   v->add("YUV_422P");
}
else if (codec == "DNxHR_SQ")
{      
   v->add("YUV_422P");
}
else if (codec == "DNxHR_HQ")
{      
   v->add("YUV_422P");
}
else if (codec == "DNxHR_HQX")
{      
   v->add("YUV_422P_10LE");
}
else if (codec == "DNxHR_444")
{      
   v->add("YUV_444P_10LE");
   v->add("GBRP_10LE");
}
else if (codec == "VP9")
{ 
   v->add("YUV_420P");
   v->add("YUVA_420P");
   
   v->add("YUV_422P");
   v->add("YUV_440P");
   v->add("YUV_444P");   
   
   v->add("YUV_420P_10LE");
   v->add("YUV_422P_10LE");
   v->add("YUV_444P_10LE");
   
   v->add("YUV_420P_12LE");
   v->add("YUV_422P_12LE");
   v->add("YUV_444P_12LE");
   
   v->add("GBRP");
   v->add("GBRP_10LE");
   v->add("GBRP_12LE");
}
else if (codec == "Cineform")
{ 
    v->add("YUV_422P_10LE");    
    v->add("GBRP_12LE");
    v->add("GBRAP_12LE");
}
else if (codec == "AV1")
{  
   v->add("YUV_420P");
   v->add("YUV_420P_10LE");
}
else if (codec == "HAP")
{  
   v->add("RGBA_U8");
}

if (v->size() > 0)
{
    auto settings = mrv::App::app->settings();
    const std::string& saved =
        settings->getValue<std::string>("SaveMovie/PixelFormat");
    for (int i = 0; i < v->size(); ++i)
    {
        const Fl_Menu_Item* const item = &v->menu()[i];
        if (!item->label())
            continue;
        const std::string& fmt = item->label();
        if (saved == fmt)
        {
            v->value(i);
            return;
        }
    }
    v->value(0);
}} {}
  }
  Function {add_presets(Fl_Choice* o, Fl_Choice* v)} {} {
    code {const Fl_Menu_Item* item = &o->menu()[o->value()];
if (!item || !item->label()) return;

std::string codec = tl::string::toLower(item->label());
codec += "-";

std::string directoryPath = mrv::presetspath();

// Open the directory
v->clear();
fs::directory_iterator dirIter(directoryPath);
for (const auto& entry : dirIter)
{
   // Check if the entry is a regular file, starts with "codec-", and ends with ".pst"
   std::string filename = entry.path().filename().string();
        
   // Check if the entry is a regular file and starts with say "vp9-"
   if (fs::is_regular_file(entry) && 
       filename.find(codec) == 0 &&
       filename.size() > 4 && 
       filename.substr(filename.size() - 4) == ".pst")
   {
       std::string preset = filename.substr(codec.size(),
                                            filename.size()-4-codec.size());
       v->add(preset.c_str());
   }
}

if (v->size() > 0)
{
  auto settings = mrv::App::app->settings();
  const std::string& saved = settings->getValue<std::string>("SaveMovie/Preset");
  for (int i = 0; i < v->size(); ++i)
  {
     const Fl_Menu_Item* const item = &v->menu()[i];	
     if (!item->label()) continue;
     const std::string& preset = item->label();
     if (saved == preset)
     {
         v->value(i);
         v->activate();
         return;
     }
  }
  v->value(0);
  v->activate();
}
else
{
  v->deactivate();
}} {}
  }
  Function {add_profiles(Fl_Choice* o)} {} {
    code {auto entries = tl::ffmpeg::getProfileLabels();
for (auto entry : entries)
{
\#ifndef TLRENDER_X264
   if (entry == "H264")
      continue;
\#endif
\#ifndef TLRENDER_SVTAV1
   if (entry == "AV1")
      continue;
\#endif
    o->add(gettext(entry.c_str()));
}
    if (o->size() > 0)
    {
        auto settings = mrv::App::app->settings();
        const std::string& saved =
            settings->getValue<std::string>("SaveMovie/Profile");
        for (int i = 0; i < o->size(); ++i)
        {
            const Fl_Menu_Item* const item = &o->menu()[i];
            if (!item->label())
                continue;
            const std::string& profile = item->label();
            if (saved == profile)
            {
                o->value(i);
                o->activate();
                return;
            }
        }
    }
    o->value(0);} {}
  }
  Function {add_resolution(Fl_Choice* o)} {} {
    code {const auto& settings = mrv::App::app->settings();
const int value = settings->getValue<int>("SaveMovie/Resolution");
o->value(value);} {}
  }
  Function {add_advanced_override(Fl_Check_Button* v)} {} {
    code {auto settings = mrv::App::app->settings();
const bool value = settings->getValue<int>("SaveMovie/Override");
v->value(value);} {}
  }
  Function {add_advanced_color_range(Fl_Choice* o)} {} {
    code {const auto& settings = mrv::App::app->settings();
int value;
if (!settings->hasValue("SaveMovie/Color Range"))
   value = o->find_index("PC");
else
   value = settings->getValue<int>("SaveMovie/Color Range");
o->value(value);} {}
  }
  Function {add_advanced_color_space(Fl_Choice* o)} {} {
    code {const auto& settings = mrv::App::app->settings();
int value;
if (!settings->hasValue("SaveMovie/Color Space"))
   value = o->find_index("bt709");
else
   value = settings->getValue<int>("SaveMovie/Color Space");
o->value(value);} {}
  }
  Function {add_advanced_color_primaries(Fl_Choice* o)} {} {
    code {const auto& settings = mrv::App::app->settings();
const int value = settings->getValue<int>("SaveMovie/Color Primaries");
o->value(value);} {}
  }
  Function {add_advanced_color_trc(Fl_Choice* o)} {} {
    code {const auto& settings = mrv::App::app->settings();
int value;
if (!settings->hasValue("SaveMovie/Color TRC"))
   value = o->find_index("iec61966-2-1");
else
   value = settings->getValue<int>("SaveMovie/Color TRC");
o->value(value);} {}
  }
  Function {add_audio_codecs(Fl_Choice* o)} {} {
    code {auto entries = tl::ffmpeg::getAudioCodecLabels();
 for (auto entry : entries)
    o->add(gettext(entry.c_str()));

if (o->size() > 0)
{
    auto settings = mrv::App::app->settings();
    const std::string& saved = settings->getValue<std::string>("SaveMovie/AudioCodec");
    for (int i = 0; i < o->size(); ++i)
    {
        const Fl_Menu_Item* const item = &o->menu()[i];
        if (!item->label())
            continue;
        const std::string& codec = item->label();
        if (saved == codec)
        {
            o->value(i);
            return;
        }
    }
}
o->value(0);} {}
  }
}
