

In Vulkan, a single primary command buffer is generally sufficient to record all the necessary drawing commands for a typical rendering frame, including drawing various types of geometry.

Here's a breakdown of why and how:

Primary Command Buffers:

These are the command buffers that are directly submitted to a queue (like the graphics queue) for execution on the GPU.
You record all the state-setting commands (e.g., binding pipelines, descriptor sets, vertex buffers, index buffers), and the drawing commands (e.g., vkCmdDraw, vkCmdDrawIndexed) into one or more primary command buffers.
A well-structured application will typically create one primary command buffer per frame (often associated with a framebuffer in the swapchain for double or triple buffering). This command buffer is then re-recorded each frame with the necessary commands to render the scene.   
Drawing Different Geometry:

Within a single primary command buffer, you can include commands to draw any number of different geometric objects.
To draw different types of geometry (e.g., triangles, quads, complex meshes), you would typically:
Bind the appropriate vertex buffers and index buffers (if using indexed drawing) that contain the vertex data for each object.
Bind the correct graphics pipeline if the rendering requirements (e.g., shaders, vertex input format) differ between the objects.
Bind the necessary descriptor sets to provide resources (e.g., textures, uniform buffers) to the shaders.
Issue the appropriate vkCmdDraw or vkCmdDrawIndexed calls with the correct parameters (e.g., vertex count, instance count, offsets) to render each object.
Secondary Command Buffers (Optional):

Vulkan also offers secondary command buffers. These cannot be submitted directly to a queue but can be called from a primary command buffer using vkCmdExecuteCommands.   
Secondary command buffers can be useful for:
Multi-threading command recording: You can record different parts of the rendering commands in parallel into multiple secondary command buffers and then execute them from the main primary command buffer. This can improve CPU utilization.   
Re-usable command sequences: If you have a sequence of commands that is used multiple times, you can record it once in a secondary command buffer and then execute it from the primary command buffer as needed.
In summary:

While you can use multiple command buffers (especially primary and secondary) in a Vulkan rendering pipeline for reasons like multi-threading or code organization, it is entirely possible and common to draw various types of geometry within a single primary command buffer by sequentially recording the necessary state changes and drawing commands for each object. The key is to manage the state (buffers, pipelines, descriptors) correctly before issuing each draw call.


Sources and related content
Rendering and presentation - Vulkan Documentation

docs.vulkan.org

Using secondary command buffers - Arm GPU Best Practices Developer Guide

developer.arm.com

Command buffer usage and multi-threaded recording - Vulkan Documentation

docs.vulkan.org






In Vulkan, how do you render to an offscreen framebuffer for compositing in a following pass (like FBOs in OpenGL)?


In Vulkan, rendering to an offscreen framebuffer for compositing in a later pass is a fundamental technique, similar in concept to using Framebuffer Objects (FBOs) in OpenGL. Here's a breakdown of how you achieve this:

1. Create the Offscreen Render Target (VkImage and VkImageView):

VkImage: You need to create a VkImage that will serve as the color attachment (and potentially depth/stencil attachment) of your offscreen framebuffer.
Define the image's usage flag to include VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT (and VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT if needed). You'll also likely need VK_IMAGE_USAGE_SAMPLED_BIT if you intend to sample from this image in a subsequent rendering pass for compositing.
Set the format of the image to the desired color format (e.g., VK_FORMAT_R8G8B8A8_UNORM).
Specify the extent (width and height) of the offscreen buffer. This can be different from the swapchain resolution.
Choose the appropriate tiling (e.g., VK_IMAGE_TILING_OPTIMAL for GPU access).
Allocate memory for the image using vkAllocateMemory and bind it to the image using vkBindImageMemory.

VkImageView: Create a VkImageView from the VkImage. This provides a typed view of the image's memory and is what you'll attach to the framebuffer.
Specify the image, viewType, format, and subresourceRange (typically aspectMask of VK_IMAGE_ASPECT_COLOR_BIT for color attachment).

2. Create the Offscreen Framebuffer (VkFramebuffer):

VkFramebufferCreateInfo: Fill in a VkFramebufferCreateInfo structure.
Set the renderPass to the VkRenderPass that is compatible with the attachments you'll use in this framebuffer.
Set the attachmentCount to the number of attachments (color, depth, stencil).
Set the pAttachments array to contain the VkImageViews of your offscreen render target(s). The order of these views must match the attachment indices in your VkRenderPass.
Set the width and height of the framebuffer to match the extent of the VkImage you created.
Set layers to 1.
vkCreateFramebuffer: Create the VkFramebuffer object.

3. Create a Compatible Render Pass (VkRenderPass):

You need a VkRenderPass that defines the rendering operations and the types of attachments used.
VkAttachmentDescription: For each attachment (color, depth, stencil) of your offscreen framebuffer, define a VkAttachmentDescription. This includes:
format: Matching the format of the VkImage.
samples: Typically VK_SAMPLE_COUNT_1_BIT for single-sampling.
loadOp: How the attachment's content should be handled at the beginning of the render pass (e.g., VK_ATTACHMENT_LOAD_OP_CLEAR to clear it, VK_ATTACHMENT_LOAD_OP_DONT_CARE if you don't need to preserve previous content).
storeOp: How the attachment's content should be handled at the end of the render pass (e.g., VK_ATTACHMENT_STORE_OP_STORE to make it available later, VK_ATTACHMENT_STORE_OP_DONT_CARE if you don't need it).
initialLayout and finalLayout: The image layouts at the start and end of the render pass. For a color attachment, VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL is common. For later sampling, you'll transition it to VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL.
VkAttachmentReference: In your VkSubpassDescription, define VkAttachmentReference structures to link the attachments to specific shader stages (e.g., color output in the fragment shader). The layout here should be appropriate for the subpass (e.g., VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL for writing).
VkSubpassDescription: Define one or more subpasses. For a simple offscreen rendering pass, you'll likely have one subpass.
VkRenderPassCreateInfo: Create the VkRenderPass object using the attachment descriptions and subpass descriptions.

4. Rendering to the Offscreen Framebuffer:

In your command buffer, begin the render pass using vkCmdBeginRenderPass, specifying the offscreen VkRenderPass and the offscreen VkFramebuffer.
Set the viewport and scissor.
Bind your graphics pipeline for the offscreen rendering.
Bind necessary descriptor sets, vertex buffers, and index buffers.
Issue drawing commands (vkCmdDraw, vkCmdDrawIndexed) to render your scene or elements to the offscreen buffer.
End the render pass using vkCmdEndRenderPass.

5. Compositing in a Following Pass:

In a subsequent rendering pass (which could be rendering to the swapchain framebuffer), you'll use the offscreen render target as a texture.
Transition Image Layout: Before you can sample from the offscreen color attachment, you need to transition its layout from VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL (or whatever the finalLayout of the first render pass was) to VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL. You'll do this using an image memory barrier (VkImageMemoryBarrier) within your command buffer.
Create a Sampler (VkSampler): Create a VkSampler object to define how textures are sampled (filtering, addressing modes, etc.).

Descriptor Set Layout and Descriptor Set:

Create a VkDescriptorSetLayout with a binding for a combined image sampler.
Allocate a VkDescriptorSet using a VkDescriptorPool and the layout.
Update the descriptor set using vkUpdateDescriptorSets to bind the VkImageView of your offscreen color attachment and the VkSampler to the descriptor set binding.

Second Render Pass: Begin a new render pass (likely targeting the swapchain framebuffer).
Bind Pipeline and Descriptor Set: Bind the graphics pipeline for your compositing pass and the descriptor set containing the offscreen texture.
Draw a Full-Screen Quad: Typically, you'll draw a full-screen quad (two triangles) to apply the compositing effect. In your fragment shader, you'll sample from the offscreen texture using the bound sampler and perform your compositing operations.
End the second render pass.

Key Vulkan Concepts Involved:

VkImage: Raw image data.
VkImageView: Typed view of an image.
VkFramebuffer: Represents a collection of attachments (image views) that can be rendered to.   
VkRenderPass: Defines the rendering stages, attachments, and their usage.
VkSubpass: A phase within a render pass.   
VkPipeline: Defines the entire rendering pipeline (shaders, fixed-function states).   
VkDescriptor Set Layout and Descriptor Set: How resources (like textures) are bound to shaders.
VkSampler: Defines how textures are sampled.
VkCommandBuffer: Records the sequence of commands, including starting/ending render passes, binding resources, and drawing.   
VkImageMemoryBarrier: Used to synchronize access to images and transition their layouts.

By following these steps, you can effectively render to an offscreen framebuffer in Vulkan and then use the rendered results as a texture in a subsequent pass for compositing or other effects. Remember to manage the lifetimes of all these Vulkan objects properly.
