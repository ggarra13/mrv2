cmake_minimum_required(VERSION 3.19)
cmake_policy(SET CMP0091 NEW)
cmake_policy(SET CMP0114 NEW)
if(POLICY CMP0135)
    cmake_policy(SET CMP0135 NEW)
endif()

project(tlRender-SuperBuild)

# Build options.
set(TLRENDER_PYTHON FALSE CACHE BOOL "Enable Python support (for OTIO Python adapters)")
set(TLRENDER_API "GL_4_1" CACHE STRING "Graphics API (GL_4_1, GL_4_1_Debug, GLES_2)")
set(TLRENDER_GLFW TRUE CACHE BOOL "Enable support for GLFW")
set(TLRENDER_GLFW_DISABLE_MACOS_APP_DELEGATE FALSE CACHE BOOL "Disable the GLFW application delegate on macOS")
set(TLRENDER_NET FALSE CACHE BOOL "Enable network support")
set(TLRENDER_OCIO TRUE CACHE BOOL "Enable support for OpenColorIO")
set(TLRENDER_AUDIO TRUE CACHE BOOL "Enable support for audio")
set(TLRENDER_JPEG TRUE CACHE BOOL "Enable support for JPEG")
set(TLRENDER_TIFF TRUE CACHE BOOL "Enable support for TIFF")
set(TLRENDER_STB TRUE CACHE BOOL "Enable support for STB I/O (TGA, BMP, PSD)")
set(TLRENDER_PNG TRUE CACHE BOOL "Enable support for PNG")
set(TLRENDER_EXR TRUE CACHE BOOL "Enable support for OpenEXR")
set(TLRENDER_FFMPEG TRUE CACHE BOOL "Enable support for FFmpeg (see the README for how to build FFmpeg on Windows)")
set(TLRENDER_FFMPEG_MINIMAL FALSE CACHE BOOL "Enable a minimal set of FFmpeg codecs")
set(TLRENDER_HAP FALSE CACHE BOOL "Enable support for HAP codec through FFmpeg")
set(TLRENDER_AV1 FALSE CACHE BOOL "Enable support for dav1d decoder through FFmpeg")
set(TLRENDER_SVTAV1 FALSE CACHE BOOL "Enable support for SvtAV1 codec through FFmpeg")
set(TLRENDER_LIBPLACEBO FALSE CACHE BOOL "Enable support for libplacebo through FFmpeg")
set(TLRENDER_VPX FALSE CACHE BOOL "Enable support for VPX codec through FFmpeg")
set(TLRENDER_X264 FALSE CACHE BOOL "Enable support for x264 saving codec through FFmpeg")
set(TLRENDER_GL TRUE CACHE BOOL "Enable support for OpenGL")
set(TLRENDER_RAW TRUE CACHE BOOL "Enable support for LibRaw")
set(TLRENDER_X11 TRUE CACHE BOOL "Enable support for X11 (Linux only)")
set(TLRENDER_WAYLAND FALSE CACHE BOOL "Enable support for Wayland (Linux only)")
set(TLRENDER_USD FALSE CACHE BOOL "Enable support for USD")
set(TLRENDER_USD_PYTHON python3 CACHE STRING "Python executable for building USD")
set(TLRENDER_MESON meson CACHE STRING "meson executable for building dav1d and libplacebo")
set(TLRENDER_BMD FALSE CACHE BOOL "Enable support for Blackmagic Design devices")
set(TLRENDER_BMD_SDK "" CACHE PATH "Full path to the Blackmagic Design SDK")
if(WIN32 OR APPLE)
    set(TLRENDER_NFD_DEFAULT TRUE)
else()
    set(TLRENDER_NFD_DEFAULT FALSE)
endif()
set(TLRENDER_NFD ${TLRENDER_NFD_DEFAULT} CACHE BOOL "Enable support for native file dialogs")
set(TLRENDER_QT6 FALSE CACHE BOOL "Enable support for Qt6")
set(TLRENDER_QT5 FALSE CACHE BOOL "Enable support for Qt5")
set(TLRENDER_PROGRAMS TRUE CACHE BOOL "Build programs")
set(TLRENDER_EXAMPLES TRUE CACHE BOOL "Build examples")
set(TLRENDER_TESTS TRUE CACHE BOOL "Build tests")
set(TLRENDER_GCOV FALSE CACHE BOOL "Enable gcov code coverage")
set(TLRENDER_GPROF FALSE CACHE BOOL "Enable gprof code profiling")
set(TLRENDER_LOCAL FALSE CACHE BOOL "Use ggarra13 local repos")

# Configure.
#
# \bug Add the OpenColorIO cmake modules.
list(PREPEND CMAKE_MODULE_PATH
    ${PROJECT_SOURCE_DIR}/../../cmake/Modules
    ${PROJECT_SOURCE_DIR}/cmake/Modules
    ${PROJECT_SOURCE_DIR}/cmake/
    ${CMAKE_INSTALL_PREFIX}/share/OpenColorIO/cmake/modules)
if(NOT CMAKE_CXX_STANDARD)
    set(CMAKE_CXX_STANDARD 17)
endif()
if(NOT BUILD_SHARED_LIBS)
    set(BUILD_SHARED_LIBS OFF)
endif()
if(NOT CMAKE_MSVC_DEBUG_INFORMATION_FORMAT)
    set(CMAKE_MSVC_DEBUG_INFORMATION_FORMAT "")
endif()
set(CMAKE_MSVC_RUNTIME_LIBRARY MultiThreaded$<$<CONFIG:Debug>:Debug>DLL)
set(CMAKE_FIND_FRAMEWORK LAST)

# https://stackoverflow.com/questions/45414507/pass-a-list-of-prefix-paths-to-externalproject-add-in-cmake-args
string(REPLACE ";" "|" CMAKE_MODULE_PATH_TMP "${CMAKE_MODULE_PATH}")
string(REPLACE ";" "|" CMAKE_PREFIX_PATH_TMP "${CMAKE_PREFIX_PATH}")

# Common arguments for building external projects.
set(TLRENDER_EXTERNAL_ARGS
    -DCMAKE_MODULE_PATH=${CMAKE_MODULE_PATH_TMP}
    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
    -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}
    -DCMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH_TMP}
    -DCMAKE_POLICY_DEFAULT_CMP0091:STRING=NEW
    -DCMAKE_POLICY_DEFAULT_CMP0114:STRING=NEW
    -DCMAKE_FIND_FRAMEWORK=${CMAKE_FIND_FRAMEWORK}
    -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}
    -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}
    -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}
    -DCMAKE_MSVC_DEBUG_INFORMATION_FORMAT=${CMAKE_MSVC_DEBUG_INFORMATION_FORMAT}
    -DCMAKE_MSVC_RUNTIME_LIBRARY=${CMAKE_MSVC_RUNTIME_LIBRARY}
    -DCMAKE_VERBOSE_MAKEFILE=${CMAKE_VERBOSE_MAKEFILE}
    -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}
    -DCMAKE_OSX_ARCHITECTURES=${CMAKE_OSX_ARCHITECTURES}
    -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS})
string(REPLACE ";" " " TLRENDER_EXTERNAL_ARGS_TMP "${TLRENDER_EXTERNAL_ARGS}")

# External dependencies.
find_package(Threads REQUIRED)
list(APPEND TLRENDER_EXTERNAL_DEPS ZLIB)
list(APPEND TLRENDER_EXTERNAL_DEPS minizip-ng)
list(APPEND TLRENDER_EXTERNAL_DEPS nlohmann_json)
list(APPEND TLRENDER_EXTERNAL_DEPS Imath)
list(APPEND TLRENDER_EXTERNAL_DEPS OTIO)
list(APPEND TLRENDER_EXTERNAL_DEPS Freetype)
find_package(OpenGL REQUIRED)
if(TLRENDER_GLFW)
    list(APPEND TLRENDER_EXTERNAL_DEPS glfw3)
endif()
if((TLRENDER_NET OR TLRENDER_FFMPEG OR TLRENDER_JPEG) AND NOT WIN32)
    list(APPEND TLRENDER_EXTERNAL_DEPS NASM)
endif()
if(TLRENDER_NET)
    if (NOT WIN32)
	list(APPEND TLRENDER_EXTERNAL_DEPS OpenSSL)
    endif()
    list(APPEND TLRENDER_EXTERNAL_DEPS Libssh2)
    list(APPEND TLRENDER_EXTERNAL_DEPS CURL)
endif()
if(TLRENDER_OCIO AND NOT "${TLRENDER_API}" STREQUAL "GLES_2")
    list(APPEND TLRENDER_EXTERNAL_DEPS yaml-cpp)
    list(APPEND TLRENDER_EXTERNAL_DEPS expat)
    list(APPEND TLRENDER_EXTERNAL_DEPS pystring)
    list(APPEND TLRENDER_EXTERNAL_DEPS OpenColorIO)
endif()
if(TLRENDER_AUDIO)
    list(APPEND TLRENDER_EXTERNAL_DEPS RtAudio)
endif()
if(TLRENDER_JPEG)
    list(APPEND TLRENDER_EXTERNAL_DEPS libjpeg-turbo)
endif()
if(TLRENDER_TIFF)
    list(APPEND TLRENDER_EXTERNAL_DEPS TIFF)
endif()
if(TLRENDER_PNG)
    list(APPEND TLRENDER_EXTERNAL_DEPS PNG)
endif()
if(TLRENDER_EXR)
    list(APPEND TLRENDER_EXTERNAL_DEPS OpenEXR)
endif()
if(TLRENDER_VPX AND TLRENDER_FFMPEG)
    list(APPEND TLRENDER_EXTERNAL_DEPS VPX)
endif()
if(TLRENDER_HAP AND TLRENDER_FFMPEG)
    list(APPEND TLRENDER_EXTERNAL_DEPS libsnappy)
endif()
if(TLRENDER_X264 AND TLRENDER_FFMPEG)
    list(APPEND TLRENDER_EXTERNAL_DEPS X264)
endif()
if(TLRENDER_AV1 AND TLRENDER_FFMPEG)
    list(APPEND TLRENDER_EXTERNAL_DEPS dav1d)
endif()
if(TLRENDER_SVTAV1 AND TLRENDER_FFMPEG)
    list(APPEND TLRENDER_EXTERNAL_DEPS SvtAV1)
endif()
if(TLRENDER_FFMPEG)
    list(APPEND TLRENDER_EXTERNAL_DEPS FFmpeg)
endif()
if(TLRENDER_LIBPLACEBO AND TLRENDER_FFMPEG AND TLRENDER_OCIO)
    list(APPEND TLRENDER_EXTERNAL_DEPS libplacebo)
endif()
if(TLRENDER_USD)
    list(APPEND TLRENDER_EXTERNAL_DEPS USD)
endif()
if(TLRENDER_RAW)
    list(APPEND TLRENDER_EXTERNAL_DEPS LCMS2)
    list(APPEND TLRENDER_EXTERNAL_DEPS jasper LibRaw)
endif()
if(TLRENDER_NFD)
    list(APPEND TLRENDER_EXTERNAL_DEPS NFD)
endif()
if(TLRENDER_GL)
    find_package(OpenGL REQUIRED)
endif()
foreach(EXTERNAL_DEP ${TLRENDER_EXTERNAL_DEPS})
    include(Build${EXTERNAL_DEP})
endforeach()

# Build tests.
if (TLRENDER_TESTS)
    include(Buildtests)
endif()

# Build tlRender.
include(BuildtlRender)
