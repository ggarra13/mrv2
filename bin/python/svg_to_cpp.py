#!/usr/bin/env python3
import argparse
import gzip
import os
import re

def create_cpp_files(svg_path, output_dir):
    """
    Reads a single SVG or SVGZ file and converts it into a C++ header and source file.

    Args:
        svg_path (str): The path to the input .svg or .svgz file.
        output_dir (str): The directory where the output files will be saved.
    """
    # This function remains largely the same, as its job is to process one file.
    if not os.path.exists(svg_path):
        print(f"Error: Input file not found at '{svg_path}'")
        return

    # --- 1. Determine filenames and variable names ---
    base_filename = os.path.basename(svg_path)
    filename_no_ext = os.path.splitext(base_filename)[0]
    if base_filename.endswith(".svgz"):
        # Handle double extension for .svg.gz -> .svg
        filename_no_ext = os.path.splitext(filename_no_ext)[0]

    # Sanitize the filename to create a valid C++ variable name
    sanitized_name = re.sub(r'[^a-zA-Z0-9_]', '_', filename_no_ext)
    variable_name = f"{sanitized_name}_svg"

    output_basename = os.path.join(output_dir, sanitized_name)
    header_filename = f"{output_basename}.h"
    cpp_filename = f"{output_basename}.cpp"

    print(f"--- Processing '{svg_path}' ---")
    print(f"  -> Output: '{header_filename}' and '{cpp_filename}'")
    print(f"  -> C++ Variable: '{variable_name}'")

    # --- 2. Read SVG/SVGZ file content ---
    try:
        if svg_path.endswith(".svgz"):
            with gzip.open(svg_path, 'rb') as f:
                svg_data = f.read()
        else:
            with open(svg_path, 'rb') as f:
                svg_data = f.read()
    except Exception as e:
        print(f"Error reading file '{svg_path}': {e}")
        return

    # --- 3. Format data as a C++ byte array ---
    hex_array_elements = [f"0x{byte:02x}" for byte in svg_data]

    # Join into a formatted string with 12 values per line for readability
    formatted_hex_array = ",\n    ".join(
        ", ".join(hex_array_elements[i:i+12])
        for i in range(0, len(hex_array_elements), 12)
    )

    # --- 4. Generate Header (.h) content ---
    header_content = f"""// AUTO-GENERATED FILE - DO NOT EDIT!
// Generated by svg_to_cpp.py from '{base_filename}'

#pragma once

#include <cstddef> // For size_t

// Extern declaration for the SVG data array
extern const unsigned char {variable_name}[];

// Extern declaration for the size of the SVG data
extern const size_t {variable_name}_size;
"""

    # --- 5. Generate Source (.cpp) content ---
    cpp_content = f"""// AUTO-GENERATED FILE - DO NOT EDIT!
// Generated by svg_to_cpp.py from '{base_filename}'

#include "{os.path.basename(header_filename)}"

// Definition of the SVG data array
const unsigned char {variable_name}[] = {{
    {formatted_hex_array}
}};

// Definition of the size of the SVG data
const size_t {variable_name}_size = sizeof({variable_name});
"""

    # --- 6. Write content to files ---
    try:
        os.makedirs(output_dir, exist_ok=True)
        with open(header_filename, 'w') as f:
            f.write(header_content)
        with open(cpp_filename, 'w') as f:
            f.write(cpp_content)
        print(f"  -> Successfully generated C++ files for '{base_filename}'.")
    except IOError as e:
        print(f"Error writing to output files for '{base_filename}': {e}")


def main():
    """Main function to parse command-line arguments and process directory."""
    parser = argparse.ArgumentParser(
        description="Convert all .svg and .svgz files in a directory to C++ header/source files.",
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument(
        "input_dir",
        help="Path to the directory containing .svg and/or .svgz files."
    )
    parser.add_argument(
        "-o", "--output-dir",
        default=".",
        help="Directory to save the generated .h and .cpp files (default: current directory)."
    )

    args = parser.parse_args()
    
    if not os.path.isdir(args.input_dir):
        print(f"Error: Input path '{args.input_dir}' is not a valid directory.")
        return

    print(f"Scanning directory '{args.input_dir}' for SVG files...")
    
    file_found = False
    for filename in os.listdir(args.input_dir):
        if filename.endswith(".svg") or filename.endswith(".svgz"):
            file_found = True
            full_path = os.path.join(args.input_dir, filename)
            if os.path.isfile(full_path):
                create_cpp_files(full_path, args.output_dir)
    
    if not file_found:
        print("No .svg or .svgz files found in the specified directory.")


if __name__ == "__main__":
    main()
